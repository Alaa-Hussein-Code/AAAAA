# -*- coding: utf-8 -*-
"""AIDA Keyword Classifier Web App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U5NlDy2AqbJ-tz3L4ofFDyfAmxcxqQO0
"""

import streamlit as st
import pandas as pd
from aida_classifier import load_aida_rules, process_dataframe, classify_keyword
from io import BytesIO

# --- Configuration and Initialization ---
st.set_page_config(layout="wide", page_title="AIDA Keyword Classifier")
RULES = load_aida_rules() # Load the classification rules once

# --- Helper function for download button ---
@st.cache_data
def convert_df_to_excel(df):
    """Converts a DataFrame to an Excel file buffer for download."""
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='AIDA_Classification')
    processed_data = output.getvalue()
    return processed_data

# --- Main App Title and Description ---
st.title("üéØ AIDA Keyword Classification Tool")
st.markdown("Use this tool to categorize your marketing keywords into the Awareness, Interest, Desire, or Action stages of the AIDA funnel.")

# --- Sidebar for Rules Display and Customization ---
st.sidebar.header("AIDA Classification Rules")
st.sidebar.markdown(
    """
    The classifier works by checking if the keyword contains any of the defined **trigger words** below.
    You can easily modify the `aida_data.json` file to update these rules.
    """
)
# Display the loaded rules
for stage, words in RULES.items():
    st.sidebar.subheader(f"‚ú® {stage}")
    st.sidebar.text(", ".join(words))


# --- Tabs for Input Methods ---
tab_manual, tab_bulk = st.tabs(["‚úçÔ∏è Single Keyword Entry", "üìÅ Bulk File Upload (Excel/CSV)"])


# 1. MANUAL ENTRY TAB
with tab_manual:
    st.header("Single Keyword Analysis")

    user_keyword = st.text_input(
        "Enter your keyword or phrase here:",
        placeholder="e.g., how to fix a leaky faucet"
    )

    if st.button("Classify Keyword", type="primary") and user_keyword:
        # Classify the keyword
        stage = classify_keyword(user_keyword, RULES)

        # Display the result with styling
        if stage == "Unclassified":
            st.warning(f"Keyword: **'{user_keyword}'** was **{stage}**.", icon="‚ö†Ô∏è")
        else:
            st.success(f"Keyword: **'{user_keyword}'** is in the **{stage}** stage.", icon="‚úÖ")

        st.info("The classification is based on simple keyword matching. If the result is incorrect, adjust the keyword rules in `aida_data.json`.")


# 2. BULK UPLOAD TAB
with tab_bulk:
    st.header("Bulk Keyword Analysis")

    uploaded_file = st.file_uploader(
        "Upload an Excel (.xlsx) or CSV file.",
        type=["xlsx", "csv"],
        help="The file must contain a column named 'Keyword'."
    )

    # Input field for the column name, useful if it's not 'Keyword'
    keyword_col_name = st.text_input(
        "Enter the exact name of the keyword column in your file:",
        value="Keyword"
    )

    if uploaded_file is not None:
        try:
            # Read the file based on type
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file)
            else: # Must be Excel (.xlsx)
                df = pd.read_excel(uploaded_file, engine='openpyxl')

            # Show a preview of the original data
            st.subheader("Original Data Preview")
            st.dataframe(df.head())

            # Check if the required column exists before processing
            if keyword_col_name not in df.columns:
                st.error(f"Error: The uploaded file does not contain a column named **'{keyword_col_name}'**.")
            else:
                # Process the DataFrame using the function from our logic file
                processed_df = process_dataframe(df, RULES, keyword_col_name)

                st.subheader("Classification Results")
                st.dataframe(processed_df, use_container_width=True)

                # Generate Download Button
                st.download_button(
                    label="‚¨áÔ∏è Download Classified Excel File",
                    data=convert_df_to_excel(processed_df),
                    file_name="AIDA_Classified_Keywords.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    type="primary"
                )

        except Exception as e:
            st.error(f"An error occurred during file processing. Please ensure the file format is correct and the column name is accurate.")
            st.exception(e)